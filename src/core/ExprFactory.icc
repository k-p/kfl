/* -*-c++-*-
 *
 *  Created by Keith Dennison on 26/07/2013.
 *  Copyright (c) 2013 Keith Dennison. All rights reserved.
 */

#ifndef __EXPR_FACTORY_ICC__
#define __EXPR_FACTORY_ICC__

template<class T>
kfl::ExprFactory<T>::~ExprFactory()
{
}

template<class T>
typename kfl::ExprFactory<T>::AlterVec * kfl::ExprFactory<T>::createAlters()
{
  return new AlterVec();
}

template<class T>
void kfl::ExprFactory<T>::addAlter(AlterVec * alters, ENum<T> * num, BndVec * bnds, Expr<T> * expr)
{
  assert(alters);
  typedef typename ECase<T>::Alter Alter;
  alters->push_back(Alter{num, bnds, expr});
}

template<class T>
typename kfl::ExprFactory<T>::BndVec * kfl::ExprFactory<T>::createBnds()
{
  return new BndVec();
}

template<class T>
void kfl::ExprFactory<T>::addBnd(BndVec * bnds, const T & name)
{
  assert(bnds);
  bnds->push_back(name);
}

template<class T>
typename kfl::ExprFactory<T>::DefnVec * kfl::ExprFactory<T>::createDefns()
{
  return new DefnVec();
}

template<class T>
void kfl::ExprFactory<T>::addDefn(DefnVec * defns, const T & name, Expr<T> * expr)
{
  assert(defns);
  typedef typename ELet<T>::Defn Defn;
  defns->push_back(Defn(name, expr));
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createVar(const T & id)
{
  return new EVar<T>(id);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createNum(int n)
{
  return new ENum<T>(n);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createConstr(int tag, int arity)
{
  return new EConstr<T>(tag, arity);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createAp(Expr<T> * fn, Expr<T> * arg)
{
  return new EAp<T>(fn, arg);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createLet(DefnVec * defns, Expr<T> * body)
{
  return new ELet<T>(defns, body);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createLetRec(DefnVec * defns, Expr<T> * body)
{
  return new ELet<T>(defns, body, true);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createCase(Expr<T> * expr, AlterVec * alters)
{
  return new ECase<T>(expr, alters);
}

template<class T>
kfl::Expr<T> * kfl::ExprFactory<T>::createLambda(BndVec * bnds, Expr<T> * expr)
{
  return new ELam<T>(bnds, expr);
}

template<class T>
kfl::ScDefn<T> * kfl::ExprFactory<T>::createScDefn(const T & name, BndVec * bnds, Expr<T> * body)
{
  return new ScDefn<T>(name, bnds, body);
}

template<class T>
typename kfl::ExprFactory<T>::ScDefnVec * kfl::ExprFactory<T>::createScDefns()
{
  return new ScDefnVec();
}

template<class T>
void kfl::ExprFactory<T>::addScDefn(ScDefnVec * defns, const T & name, BndVec * bnds, Expr<T> * body)
{
  assert(defns);
  defns->push_back(createScDefn(name, bnds, body));
}

template<class T>
kfl::Program<T> * kfl::ExprFactory<T>::createProgram(ScDefnVec * defns)
{
  return new Program<T>(defns);
}

#endif /* __EXPR_FACTORY_ICC__ */
